// Lab_11_4.cpp
// < Юлія Лазарів >
// Лабораторна робота № 11.4
// Опрацювання бінарного файлу
// Варіант 15

#include <iomanip>
#include <iostream>
#include <ctime>
#include <string>
#include <fstream>

using namespace std;

enum roomtype
{
	ODNO = 1, DVO = 2
};
string rooomtypearr[] = { "1 bed", "2 bed" };

struct dweller
{
	char LastName[60];
	char Initials[60];
};

struct room
{
	roomtype RoomType = roomtype::DVO;
	dweller dwellers[2];
	room()
	{}
	room(roomtype rt) { this->RoomType = rt; }
};

void add();
void create();
void autocreate();
void StartMenu();
void print(string filename);
void change();
void remove();
void find();

void  main()
{
	srand(time(NULL));
	StartMenu();
	system("pause");
}

void create()
{
	string filename;
	cout << "Enter the filename where you want to save the data in: "; cin >> filename;
	ofstream fout(filename, ios::binary);
	int size = 15;
	room* rooms = new room[15];
	int roomcounter = 0;
	room rm;
	for (size_t i = 0; i < 15; i++)
	{
		cout << "Room type(1 - odnomisniy,2 - dvomisniy):"; int t; cin >> t;
		switch (t)
		{
		case 1:
		{
			if (roomcounter < 5)
			{
				roomcounter++;
				rm.RoomType = roomtype::ODNO;
				cout << "Last name: "; cin >> rm.dwellers[0].LastName;
				cout << "Initials: "; cin >> rm.dwellers[0].Initials;
				break;
			}
			else
			{
				cout << "Sorry,there is no free one room apartments in our hotel.\n" << endl;
				break;
			}
		}
		case 2:
		{
			rm.RoomType = roomtype::DVO;
			cout << "Last name: "; cin >> rm.dwellers[0].LastName;
			cout << "Initials: "; cin >> rm.dwellers[0].Initials;
			cout << "Last name: "; cin >> rm.dwellers[1].LastName;
			cout << "Initials: "; cin >> rm.dwellers[1].Initials;
			break;
		}
		default:
		{
			cout << "Error.You Entered the incorrect code." << endl;
		}
		}
		fout.write((char*)&rm, sizeof(room));
	}
	fout.close();
}

void autocreate()
{
	string filename;
	cout << "Enter the filename: "; cin >> filename;

	ofstream fout(filename, ios::binary);
	string InitialVector[] = { "I.I","T.K","P.Y","M.O","J.Z","X,Y",
							"O.E","V.I","K.I","K,I","V.V" };
	string LastNames[] = { "Petrenko","Senechko","Tsymbala"
		,"Nykolyak","Tkachenko","Nuchepura",
		"Lesyn","Matskiv","Makovetska","Marchyshyn","Palyvoda" };
	room rm;
	cout << "Size:";
	int size; cin >> size;
	if (size > 15)
	{
		cout << "Error.Size of autogenerated array is bigger than the hotel capacity" << endl;
		return;
	}
	for (size_t i = 0; i < size; i++)
	{
		if (i < 5)
		{
			rm.RoomType = roomtype::ODNO;
			cin >> rm.dwellers[0].LastName;
			cin >> rm.dwellers[0].Initials;
		}
		else
		{
			rm.RoomType = roomtype::DVO;
			cin >> rm.dwellers[0].LastName;
			cin >> rm.dwellers[0].Initials;
			cin >> rm.dwellers[1].LastName;
			cin >> rm.dwellers[1].Initials;
		}
		fout.write((char*)&rm, sizeof(room));
	}
	fout.close();
}

void StartMenu()
{
	int choice;
	do
	{
		cout << "==============Menu==============" << endl;
		cout << "0.Add a dweller" << endl;
		cout << "1.Create a list of dwellers." << endl;
		cout << "2.Print array" << endl;
		cout << "3.Change a dweller list." << endl;
		cout << "4.Remove a dweller." << endl;
		cout << "5.Find a dweller." << endl;
		cout << "6.Clear screen" << endl;
		cout << "7.Exit." << endl;
		cout << "================================" << endl;
		cout << endl;
		cout << "Enter your choice: "; cin >> choice;
		cout << endl;
		switch (choice)
		{
		case 0:
		{
			add();
			break;
		}
		case 1:
		{
			autocreate();
			cout << "done" << endl;
			break;
		}
		case 2:
		{
			print("");
			break;
		}
		case 3:
		{
			change();
			break;
		}
		case 4:
		{
			remove();
			break;
		}
		case 5:
		{
			find();
			break;
		}
		case 6:
		{
			system("cls");
			break;
		}
		default:
		{
			break;
		}
		}
	} while (choice != 10);
}

void print(string filename = "")
{
	int i = 0;
	ifstream fin;
	if (filename == "")
	{
		cout << "Enter filename:"; cin >> filename;
	}
	fin.open(filename, ios::binary);
	string str;
	cout << "===============================================" << endl;
	cout << "N\t|Room\t|Init\t|Last name            |" << endl;
	cout << "===============================================" << endl;
	room rm;
	while (fin.read((char*)&rm, sizeof(rm)))
	{
		switch (rm.RoomType)
		{
		case ODNO:
		{
			cout << i << "\t| " << rooomtypearr[(int)rm.RoomType - 1];
			cout << " |" << rm.dwellers[0].Initials;
			cout << "\t|" << rm.dwellers[0].LastName;
			cout << endl << "----------------------------------------------|";
			break;
		}
		case DVO:
		{
			cout << i << "\t| " << rooomtypearr[(int)rm.RoomType - 1];
			cout << " |" << rm.dwellers[0].Initials;
			cout << "\t|" << rm.dwellers[0].LastName;
			cout << endl;
			cout << "        |       |" << rm.dwellers[1].Initials;
			cout << "\t|" << rm.dwellers[1].LastName;
			cout << endl << "----------------------------------------------|";
			break;
		}
		}
		cout << endl;
		i++;
	}
	cout << "===============================================" << endl;
	fin.close();
}

void change()
{
	string filename;
	cin.sync();
	cout << "Enter filename:"; cin >> filename;
	print(filename);
	ifstream fin(filename, ios::binary);

	cout << "Enter the index of a dweller(s) which you want to change: ";
	int index = 0; cin >> index;
	cout << "N\t|Room\t|Init\t|" << endl;
	cout << "===============================================================" << endl;
	room rm;
	if (index >= 15)
	{
		cout << "Error. You are trying to do operations with a no existant dweller." << endl;
		return;
	}
	else
	{
		fin.seekg(index * sizeof(rm));
		fin.read((char*)&rm, sizeof(rm));
	}
	if (index < 5)
	{
		cout << index << "\t| " << rooomtypearr[(int)rm.RoomType - 1];
		cout << " |" << rm.dwellers[0].Initials;
		cout << "\t|" << rm.dwellers[0].LastName;
		cout << endl << "------------------------------- --------------|";
		cout << endl << "Enter Last name:"; cin >> rm.dwellers[0].LastName;
		cout << "Enter Initials::"; cin >> rm.dwellers[0].Initials;
	}
	else
	{
		cout << index << "\t| " << rooomtypearr[(int)rm.RoomType - 1];
		cout << " |" << rm.dwellers[0].Initials;
		cout << "\t|" << rm.dwellers[0].LastName;
		cout << endl;
		cout << "        |       |" << rm.dwellers[1].Initials;
		cout << "\t|" << rm.dwellers[1].LastName;
		cout << endl << "----------------------------------------------|";
		cout << endl << "Enter Last name:"; cin >> rm.dwellers[0].LastName;
		cout << "Enter Initials::"; cin >> rm.dwellers[0].Initials;
		cout << "Enter Last name:"; cin >> rm.dwellers[1].LastName;
		cout << "Enter Initials::"; cin >> rm.dwellers[1].Initials;
	}
	fin.close();
	ifstream fin2(filename, ios::binary);
	ofstream temporary("temp.dat", ios::binary);
	room rm2;
	int i = 0, _index = 0;
	while (fin2.read((char*)&rm2, sizeof(rm)))
	{
		if (i == index)
		{
			_index++;
			temporary.write((char*)&rm, sizeof(rm));
			fin2.seekg(sizeof(rm2) * (index + 1));
			i++;
		}
		else
		{
			temporary.write((char*)&rm2, sizeof(rm2));
			i++;
		}
	}
	temporary.close();
	fin.close();
	std::remove(filename.c_str());
	std::rename("temp.dat", filename.c_str());
	cout << endl << endl;
}


void find()
{
	cin.sync();
	string ln, ini;
	cout << endl << "Enter Last name:"; cin >> ln;
	int counter = 0;
	int index = -1;
	string filename;
	cin.sync();
	cin.ignore();
	cout << "Enter filename:"; cin >> filename;
	ifstream fin;
	fin.open(filename, ios::binary);
	string str;
	int I = 0;
	room rm;
	room foundrm;
	while (fin.read((char*)&rm, sizeof(rm)))
	{
		for (size_t j = 0; j < (int)rm.RoomType; j++)
		{
			if (ln == rm.dwellers[j].LastName)
			{
				index = I;
				counter++;
				foundrm = rm;
			}
		}
		I++;
	}
	fin.close();
	if (counter == 1)
	{
		cout << "===============================================" << endl;
		cout << "N\t|Room\t|Init\t|Last name            |" << endl;
		cout << "===============================================" << endl;
		switch (foundrm.RoomType)
		{
		case ODNO:
		{
			cout << index << "\t| " << rooomtypearr[(int)rm.RoomType - 1];
			cout << " |" << foundrm.dwellers[0].Initials;
			cout << "\t|" << foundrm.dwellers[0].LastName;
			cout << endl << "----------------------------------------------|";
			break;
		}
		case DVO:
		{
			cout << index << "\t| " << rooomtypearr[(int)foundrm.RoomType - 1];
			cout << " |" << foundrm.dwellers[0].Initials;
			cout << "\t|" << foundrm.dwellers[0].LastName;
			cout << endl;
			cout << "        |       |" << foundrm.dwellers[1].Initials;
			cout << "\t|" << foundrm.dwellers[1].LastName;
			cout << endl << "----------------------------------------------|";
			break;
		}
		}
		cout << endl;
		cout << "===============================================" << endl;
	}
	if (index == -1)
	{
		cout << "There is no dwellers with the last name " << ln << endl;
		return;
	}
	if (counter > 1)
	{
		cout << "There is more than 1 dweller with the  last name " << ln << endl;
		cout << "Enter initials: "; cin >> ini;
	}
	room rm3;
	ifstream fin2(filename, ios::binary);
	while (fin2.read((char*)&rm3, sizeof(rm)))
	{
		for (size_t j = 0; j < (int)rm3.RoomType; j++)
		{
			if (ln.c_str() == rm3.dwellers[j].LastName && rm3.dwellers[j].Initials == ini.c_str())
			{
				foundrm = rm3;
				break;
			}
		}
	}
	if (index == -1)
	{
		cout << "There is no dwellers with the last name " << ln + " " + ini << endl;
		return;
	}
	else
	{
		cout << "===============================================" << endl;
		cout << "N\t|Room\t|Init\t|Last name            |" << endl;
		cout << "===============================================" << endl;
		switch (foundrm.RoomType)
		{
		case ODNO:
		{
			cout << index << "\t| " << rooomtypearr[(int)rm.RoomType - 1];
			cout << " |" << foundrm.dwellers[0].Initials;
			cout << "\t|" << foundrm.dwellers[0].LastName;
			cout << endl << "----------------------------------------------|";
			break;
		}
		case DVO:
		{
			cout << index << "\t| " << rooomtypearr[(int)foundrm.RoomType - 1];
			cout << " |" << foundrm.dwellers[0].Initials;
			cout << "\t|" << foundrm.dwellers[0].LastName;
			cout << endl;
			cout << "        |       |" << foundrm.dwellers[1].Initials;
			cout << "\t|" << foundrm.dwellers[1].LastName;
			cout << endl << "----------------------------------------------|";
			break;
		}
		}
		cout << endl;
		cout << "===============================================" << endl;

		cout << endl << endl;
	}
}

void remove()
{
	string filename;
	cout << "Filename: "; cin >> filename;
	ifstream fin;
	fin.open(filename, ios::binary);
	print(filename);
	cout << "Enter the index of a dweller(s) which you want to remove: ";
	int index = 0; cin >> index;
	cout << "N\t|Room\t|Init\t|" << endl;
	cout << "===============================================================" << endl;
	string str;
	int I = 0;
	room rm;
	while (fin.read((char*)&rm, sizeof(rm)))
	{
		if (index == I)
		{
			if (index < 5)
			{
				cout << index << "\t| " << rooomtypearr[(int)rm.RoomType - 1];
				cout << " |" << rm.dwellers[0].Initials;
				cout << "\t|" << rm.dwellers[0].LastName;
				cout << endl << "------------------------------- --------------|";
			}
			else
			{
				cout << index << "\t| " << rooomtypearr[(int)rm.RoomType - 1];
				cout << " |" << rm.dwellers[0].Initials;
				cout << "\t|" << rm.dwellers[0].LastName;
				cout << endl;
				cout << "        |       |" << rm.dwellers[1].Initials;
				cout << "\t|" << rm.dwellers[1].LastName;
				cout << endl << "----------------------------------------------|";

			}
			cout << endl << endl;
		}
		I++;
	}
	fin.close();
	ifstream reader(filename, ios::binary);
	ofstream temp("temporary.dat", ios::binary);
	bool moved = false;
	room rm2;
	int i = 0;
	while (reader.read((char*)&rm2, sizeof(rm2)))
	{
		i++;
		if (i == index)  	continue;
		else	temp.write((char*)&rm2, sizeof(rm2));
	}
	reader.close();
	temp.close();
	std::remove(filename.c_str());
	std::rename("temporary.dat", filename.c_str());
}

void add()
{
	string filename;
	cin.sync();
	cout << "Enter filename:"; cin >> filename;
	ifstream fin;
	fin.open(filename, ios::binary);
	string str;
	int iter = 0;
	int OneRC = 0, TwoRC = 0;
	room rm2;
	while (fin.read((char*)&rm2, sizeof(rm2)))
	{
		iter++;
		if (rm2.RoomType == ODNO)
			OneRC++;
		else
			TwoRC++;
	}

	fin.close();
	if (iter > 14)
	{
		cout << "Sorry,but you cant add a new dweller because the hotel has no free apartments" << endl;
		return;
	}
	cout << "Room type(1 - odnomisniy,2 - dvomisniy):"; int t; cin >> t;
	room rm;
	switch (t)
	{
	case 1:
	{
		if (OneRC < 5)
		{

			rm.RoomType = roomtype::ODNO;
			cin.sync();
			cout << "Last name: "; cin >> rm.dwellers[0].LastName;
			cin.sync();
			cout << "Initials: "; cin >> rm.dwellers[0].Initials;
			break;
		}
		else
		{
			cout << "Sorry,there is no free one room apartments in our hotel.\n" << endl;
			return;
		}
	}
	case 2:
	{
		cin.sync();
		rm.RoomType = roomtype::DVO;
		cout << "Last name: "; cin >> rm.dwellers[0].LastName;
		cin.sync();
		cout << "Initials: "; cin >> rm.dwellers[0].Initials;
		cin.sync();
		cout << "Last name: "; cin >> rm.dwellers[1].LastName;
		cin.sync();
		cout << "Initials: "; cin >> rm.dwellers[1].Initials;
		cin.sync();
		break;
	}
	default:
	{
		cout << "Error.You Entered the incorrect code." << endl;
		return;
	}
	}
	fstream fout;
	fout.open(filename, ios::binary | ios::app);
	fout.write((char*)&rm, sizeof(rm));
	fout.close();
}